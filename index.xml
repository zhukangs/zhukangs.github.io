<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Promise</title>
    <link>https://hugo.zkilm.cn/</link>
    <description>Recent content on Promise</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sat, 05 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://hugo.zkilm.cn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Laravel 使用JWT API 授权🚀</title>
      <link>https://hugo.zkilm.cn/posts/2022/20220305-api-jwt/</link>
      <pubDate>Sat, 05 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.zkilm.cn/posts/2022/20220305-api-jwt/</guid>
      <description>什么是JWT  Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（(RFC 7519).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。作者：Dearmadman链接：https://www.jianshu.com/p/576dbf44b2ae来源：简书著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
 关于JWT讲解与分析：https://learnku.com/articles/17883
安装 composer 安装 lcobucci/jwt ，我这里默认安装的是最新版 4.1 。
composer require lcobucci/jwt 封装 在 app\Helpers 目录下新建 Jwt.php 文件，封装 Jwt 类。
&amp;lt;?php /** * Created by PhpStorm. * User: zhukang * Date: 2019/8/22 * Time: 16:39 */ namespace App\Helpers; use Illuminate\Support\Facades\Redis; use Lcobucci\Clock\SystemClock; use Lcobucci\JWT\Configuration; use Lcobucci\JWT\Exception; use Lcobucci\JWT\Signer\Hmac\Sha256; use Lcobucci\JWT\Signer\Key\InMemory; use Lcobucci\JWT\Token\Plain; use Lcobucci\JWT\Validation\Constraint\IdentifiedBy; use Lcobucci\JWT\Validation\Constraint\IssuedBy; use Lcobucci\JWT\Validation\Constraint\PermittedFor; use Lcobucci\JWT\Validation\Constraint\SignedWith; use Lcobucci\JWT\Validation\Constraint\ValidAt; use Lcobucci\JWT\Validation\RequiredConstraintsViolated; trait Jwt { protected $issuedBy;//签发人  protected $permittedFor;//受众  protected $identifiedBy;//jwt编号  protected $issuedAt;//签发时间  protected $expiresAt;//过期时间  protected $jwt_secret; //秘钥  public function __construct() { //获取jwt配置信息  $jwt_configs = config(&amp;#39;jwt&amp;#39;); $this-&amp;gt;issuedBy = $jwt_configs[&amp;#39;issuedBy&amp;#39;]; $this-&amp;gt;permittedFor = $jwt_configs[&amp;#39;permittedFor&amp;#39;]; $this-&amp;gt;identifiedBy = $jwt_configs[&amp;#39;identifiedBy&amp;#39;]; $this-&amp;gt;issuedAt = $jwt_configs[&amp;#39;issuedAt&amp;#39;]; $this-&amp;gt;expiresAt = $this-&amp;gt;issuedAt-&amp;gt;modify($jwt_configs[&amp;#39;expiresAt&amp;#39;]); $this-&amp;gt;jwt_secret = $jwt_configs[&amp;#39;jwt_secret&amp;#39;]; } /** * @Description:生成jwt配置对象 * @return Configuration * @Author:zhukang * @Date:2022/4/7 16:05 */ public function createJwtObject() { return Configuration::forSymmetricSigner( new Sha256(), InMemory::base64Encoded($this-&amp;gt;jwt_secret) ); } /** * @Description:生成token * @param array $bind 需要在jwt载体(payload)中加入的数据 [&amp;#39;userid&amp;#39;=&amp;gt;1,&amp;#39;xxxx&amp;#39;=&amp;gt;xxxx] * @return string \Lcobucci\JWT\Token * @Author:zhukang * @Date:2022/4/7 16:04 */ public function getToken(array $bind = []) { $jwt_object = $this-&amp;gt;createJwtObject(); $jwt_obj = $jwt_object-&amp;gt;builder() -&amp;gt;issuedBy($this-&amp;gt;issuedBy) -&amp;gt;permittedFor($this-&amp;gt;permittedFor) -&amp;gt;identifiedBy($this-&amp;gt;identifiedBy) -&amp;gt;issuedAt($this-&amp;gt;issuedAt) -&amp;gt;canOnlyBeUsedAfter($this-&amp;gt;issuedAt) -&amp;gt;expiresAt($this-&amp;gt;expiresAt); if (is_array($bind) &amp;amp;&amp;amp; !</description>
    </item>
    
    <item>
      <title>Laravel 使用 Sanctum API 授权</title>
      <link>https://hugo.zkilm.cn/posts/2022/20220218-api-sanctum/</link>
      <pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.zkilm.cn/posts/2022/20220218-api-sanctum/</guid>
      <description>介绍  Laravel Sanctum 为 SPA（单页应用程序）、移动应用程序和基于令牌的、简单的 API 提供轻量级身份验证系统。Sanctum 允许应用程序的每个用户为他们的帐户生成多个 API 令牌。这些令牌可以被授予指定允许令牌执行哪些操作的能力 / 范围。
 相关文档：https://learnku.com/docs/laravel/9.x/sanctum/12272
安装   安装 Laravel Sanctum
composer require laravel/sanctum   Artisan 命令发布 Sanctum 的配置和迁移文件
php artisan vendor:publish --provider=&amp;#34;Laravel\Sanctum\SanctumServiceProvider&amp;#34;   Sanctum 将创建一个数据库表来存储 API 令牌
php artisan migrate   将 Sanctum 的中间件添加到您应用的 app/Http/Kernel.php 文件中的 api 中间件组中
&amp;#39;api&amp;#39; =&amp;gt; [ \Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class, &amp;#39;throttle:api&amp;#39;, \Illuminate\Routing\Middleware\SubstituteBindings::class, ],   配置   重写默认模型
执行迁移命令得时候会生成app\Models\PersonalAccessToken.php文件，尽管通常不需要，但您可以自由扩展 Sanctum 内部使用的 PersonalAccessToken 模型。由于生成的表名叫 personal_access_tokens，开发中我们习惯用户表名叫 users，所以我们可以将表名修改为 user_tokens 。</description>
    </item>
    
    <item>
      <title>Laravel 开发 API 初始搭建</title>
      <link>https://hugo.zkilm.cn/posts/2022/20220115-api-init/</link>
      <pubDate>Sat, 15 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.zkilm.cn/posts/2022/20220115-api-init/</guid>
      <description>前言 使用 Laravel 开发过不少项目，大部分还是前后端分离的，所以今天就总结归纳下在开发API项目时，Laravel 的前期框架搭建过程！
环境  PHP 8.0.5 (cli) MySQL 8.0.25-0ubuntu0.20.04.1 (Ubuntu) Nginx nginx/1.18.0 (Ubuntu) IDE PhpStorm2020.2  搭建   安装
//默认安装最新版本 composer create-project laravel/laravel newapi //指定版本 composer create-project --prefer-dist laravel/laravel newapi &amp;#34;6.0.*&amp;#34;   配置
  数据库（配置根目录下 .env 文件）
DB_CONNECTION=mysql // host地址 DB_HOST=127.0.0.1 // 端口号 DB_PORT=3306 // 数据库名 DB_DATABASE=laravel9 // 用户名 DB_USERNAME=root // 密码 DB_PASSWORD=   时区（配置 config/app.php 文件）
&amp;#39;timezone&amp;#39; =&amp;gt; &amp;#39;PRC&amp;#39;, // 大陆时间     安装扩展包</description>
    </item>
    
    <item>
      <title>RSA加解密🔒</title>
      <link>https://hugo.zkilm.cn/posts/2021/20211215-rsa/</link>
      <pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.zkilm.cn/posts/2021/20211215-rsa/</guid>
      <description>生成RSA公私钥  代码  class RsaHandler { /** * 过期时间 * @var int|mixed */ protected $expire; /** * 密钥密码 * @var string */ protected $pass_phrase; /** * 密钥保存路径 * @var string */ protected $path; /** * 私钥 * @var string */ protected $private_key; /** * 时间戳 * @var integer */ protected $time; /** * 基础配置 * @var string[] */ public $dn = [ &amp;#34;countryName&amp;#34; =&amp;gt; &amp;#34;CN&amp;#34;, &amp;#34;stateOrProvinceName&amp;#34; =&amp;gt; &amp;#34;ChongQing&amp;#34;, &amp;#34;localityName&amp;#34; =&amp;gt; &amp;#34;China&amp;#34;, &amp;#34;organizationName&amp;#34; =&amp;gt; &amp;#34;The Brain Room Limited&amp;#34;, &amp;#34;organizationalUnitName&amp;#34; =&amp;gt; &amp;#34;PHP Documentation Team&amp;#34;, &amp;#34;commonName&amp;#34; =&amp;gt; &amp;#34;Rancy Bruce&amp;#34;, &amp;#34;emailAddress&amp;#34; =&amp;gt; &amp;#34;rancy@rancy.</description>
    </item>
    
    <item>
      <title>Laravel 表单验证封装💪</title>
      <link>https://hugo.zkilm.cn/posts/2021/20211119-laravel-formrequest/</link>
      <pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.zkilm.cn/posts/2021/20211119-laravel-formrequest/</guid>
      <description>新建「表单验证基类」  新建「表单验证基类」 app/Http/Requests/FormRequest.php  &amp;lt;?php namespace App\Http\Requests; use Illuminate\Foundation\Http\FormRequest as BaseFormRequest; class FormRequest extends BaseFormRequest { use SceneValidator; /** * Determine if the user is authorized to make this request. * * @return bool */ public function authorize() { return true; } } 新建场景验证类  新建 app/Http/Requests/SceneValidator.php  &amp;lt;?php namespace App\Http\Requests; use Illuminate\Contracts\Validation\{Factory, Validator}; trait SceneValidator { protected $scene = null; protected $onlyRule = []; protected $autoValidate = true; /** * Validate.</description>
    </item>
    
    <item>
      <title>监控服务器异常与重启</title>
      <link>https://hugo.zkilm.cn/posts/2021/20210909-restart-lnmp/</link>
      <pubDate>Thu, 09 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.zkilm.cn/posts/2021/20210909-restart-lnmp/</guid>
      <description>在一些特定的场景下，我们希望通过脚本去自动监控服务器的状态是否出现异常，如果出现异常，则自动进行重启，替代人手去重启。
PHP与Nginx 查看服务进程数 通过查看服务器相关进程数，来判断服务器是否正常运行，脚本 service-restart.sh 如下：
# ! /bin/sh ###查看fpm服务是否运行 phpfpm_procnum=`ps -ef|grep &amp;#34;php-fpm&amp;#34;|grep -v grep|wc -l` if [ $phpfpm_procnum -eq 0 ] then echo &amp;#34;restart php-fpm...&amp;#34; systemctl restart php-fpm &amp;gt;&amp;gt; /var/log/listen_service_start.log 2&amp;gt;&amp;amp;1 fi ###查看nginx服务是否运行 nginx_procnum=`ps -ef|grep &amp;#34;nginx&amp;#34;|grep -v grep|wc -l` if [ $nginx_procnum -eq 0 ] then echo &amp;#34;restart nginx...&amp;#34; systemctl restart nginx &amp;gt;&amp;gt; /var/log/listen_service_start.log 2&amp;gt;&amp;amp;1 fi 查看服务器响应 通过 curl 服务器地址，根据响应信息判断是否出现异常，脚本 nginx404.php 如下：
&amp;lt;?php $url = &amp;#39;https://test.com&amp;#39;; $cmd = &amp;#39;systemctl restart php-fpm&amp;#39;; for ($i = 0; $i &amp;lt; 5; $i++) { $exec = &amp;#34;curl connect-timeout 3 -I $url2&amp;gt;/dev/null&amp;#34;; $res = shell_exec($exec); if (stripos($res, &amp;#39;404 Not Found&amp;#39;) !</description>
    </item>
    
    <item>
      <title>百万级数据导入 Elasticsearch 😌</title>
      <link>https://hugo.zkilm.cn/posts/2021/20210901-python-es/</link>
      <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.zkilm.cn/posts/2021/20210901-python-es/</guid>
      <description>涉及知识点  Python 读取CSV文件 Elasticsearch 导入json文件  本文目标  完成超过100M的SCV文件上传到ES  导语 如何将100w条记录同步到Es？
Kibana 有个 Data Visualizer 可以直接上传 CSV 文件，但是有个限制是文件不能大于100M。
那么对于大于100M的 CSV 文件我们该如何进行上传到ES呢？
我这里采用的解决方案是通过Es的 Bulk API 进行导入。
参考地址：https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html
但是 Bulk API 对上传的JSON文件大小也会有限制，限制为50M，所以我们会对JSON文件进行拆分，保证每个单JSON文件不超过50M。
整体包括两个步骤：
步骤一：对总CSV文件进行json格式化，格式化为指定的json格式，需要符合Bulk API的上传要求 步骤二：对json文件进行拆分存储，保证单json文件大小不超过50M Py脚本 Python 代码如下(test.py)：
import csv from collections import defaultdict, OrderedDict import json import time import argparse import os parser = argparse.ArgumentParser(description=&amp;#39;自定义CLI传参&amp;#39;) parser.add_argument(&amp;#39;--csv_filename&amp;#39;, &amp;#39;-cf&amp;#39;, help=&amp;#39;csv_filename 选取指定CSV文件名，必要参数&amp;#39;, required=True) parser.add_argument(&amp;#39;--json_dirname&amp;#39;, &amp;#39;-jd&amp;#39;, help=&amp;#39;json_dirname 将作为JSON文件目录名，必要参数&amp;#39;, required=True) args = parser.parse_args() start_time=time.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://hugo.zkilm.cn/about/</link>
      <pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.zkilm.cn/about/</guid>
      <description>朱康 男 90 后
WEB开发者，喜欢折腾，热爱LARAVEL，重度代码洁癖患者。 综合技能    名称 熟悉程度     PHP ★★★★☆   CSS ★★★☆☆   JAVASCRIPT ★★★☆☆   LINUX ★★★☆☆   MySQL ★★★☆☆   MARKDOWN ★★★☆☆   GOLANG ★★☆☆☆   PYTHON ★★☆☆☆    联系方式：  Github：https://github.com/zhukangs 邮箱：zhukang074@gmail.com  </description>
    </item>
    
    <item>
      <title>Elasticsearch 在 Laravel 中的使用👍</title>
      <link>https://hugo.zkilm.cn/posts/2021/20210823-laravel-es/</link>
      <pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.zkilm.cn/posts/2021/20210823-laravel-es/</guid>
      <description>本文目标  学会在 Laravel 中安装 Elasticsearch。 创建索引。 简单查询。  安装 composer 包 composer require elasticsearch/elasticsearch &amp;#39;~7.0&amp;#39; 配置 config/database.php # Elasticsearch Config Info &amp;#39;elasticsearch&amp;#39; =&amp;gt; [ // Elasticsearch 支持多台服务器负载均衡，因此这里是一个数组  &amp;#39;hosts&amp;#39; =&amp;gt; explode(&amp;#39;,&amp;#39;, env(&amp;#39;ES_HOSTS&amp;#39;)), &amp;#39;username&amp;#39; =&amp;gt; env(&amp;#39;ES_USERNAME&amp;#39;), &amp;#39;password&amp;#39; =&amp;gt; env(&amp;#39;ES_PASSWORD&amp;#39;), ], 初始化 Elasticsearch 对象 // 注册一个名为 es 的单例 $this-&amp;gt;app-&amp;gt;singleton(&amp;#39;es&amp;#39;, function () { // 从配置文件读取 Elasticsearch 服务器列表  $builder = ESClientBuilder::create()-&amp;gt;setHosts(config(&amp;#39;database.elasticsearch.hosts&amp;#39;)) -&amp;gt;setBasicAuthentication(config(&amp;#39;database.elasticsearch.username&amp;#39;),config(&amp;#39;database.elasticsearch.password&amp;#39;)); // 如果是开发环境  if (app()-&amp;gt;environment() === &amp;#39;local&amp;#39;) { // 配置日志，Elasticsearch 的请求和返回数据将打印到日志文件中，方便我们调试  $builder-&amp;gt;setLogger(app(&amp;#39;log&amp;#39;)-&amp;gt;driver()); } return $builder-&amp;gt;build(); }); 创建索引 curl -XPUT -u name:pwd http://ip:9200/user_behavior?</description>
    </item>
    
    <item>
      <title>Homestead(ubuntu)&#43;Laravel 使用 RabbitMQ</title>
      <link>https://hugo.zkilm.cn/posts/2021/20210121-laravel-rabbitmq/</link>
      <pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.zkilm.cn/posts/2021/20210121-laravel-rabbitmq/</guid>
      <description>安装 erlang  erlang 是 RabbitMQ 的依赖。首先执行  sudo apt-get update  然后执行  sudo apt-get install erlang  安装完毕后，输入 erl 查看 erlang 版本，出现如下提示则表示安装成功：  Erlang/OTP 20 [erts-9.2] [source] [64-bit] [smp:1:1] [ds:1:1:10] [async-threads:10] [kernel-poll:false] Eshell V9.2 (abort with ^G) 1&amp;gt;  然后退出 erlang 命令行：按下 ctrl+c，然后输入 a 即可。  安装 RabbitMq sudo apt-get install rabbitmq-server  安装完毕后，查看 RabbitMQ 状态：  sudo rabbitmqctl status # 附： # 启动RabbitMQ： service rabbitmq-server start # 停止RabbitMQ： service rabbitmq-server stop  # 重启RabbitMQ： service rabbitmq-server restart  配置 RabbitMQ  执行命令，启动 RabbitMQ 插件  sudo rabbitmq-plugins enable rabbitmq_management  添加用户 RabbitMQ，格式：rabbitmqctl add_user 用户名 密码  rabbitmqctl add_user admin admin  给予用户管理员权限  sudo rabbitmqctl set_user_tags admin administrator  为用户设置读写权限  sudo rabbitmqctl set_permissions -p / admin &amp;#34;.</description>
    </item>
    
  </channel>
</rss>
