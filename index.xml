<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Promise</title>
    <link>https://hugo.zkilm.cn/</link>
    <description>Recent content on Promise</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Fri, 19 Nov 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://hugo.zkilm.cn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Laravel 表单验证封装💪</title>
      <link>https://hugo.zkilm.cn/posts/20211119-laravel-formrequest/</link>
      <pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.zkilm.cn/posts/20211119-laravel-formrequest/</guid>
      <description>新建「表单验证基类」  新建「表单验证基类」 app/Http/Requests/FormRequest.php  &amp;lt;?php namespace App\Http\Requests; use Illuminate\Foundation\Http\FormRequest as BaseFormRequest; class FormRequest extends BaseFormRequest { use SceneValidator; /** * Determine if the user is authorized to make this request. * * @return bool */ public function authorize() { return true; } } 新建场景验证类  新建 app/Http/Requests/SceneValidator.php  &amp;lt;?php namespace App\Http\Requests; use Illuminate\Contracts\Validation\{Factory, Validator}; trait SceneValidator { protected $scene = null; protected $onlyRule = []; protected $autoValidate = true; /** * Validate.</description>
    </item>
    
    <item>
      <title>监控服务器异常与重启</title>
      <link>https://hugo.zkilm.cn/posts/20210909-restart-lnmp/</link>
      <pubDate>Thu, 09 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.zkilm.cn/posts/20210909-restart-lnmp/</guid>
      <description>在一些特定的场景下，我们希望通过脚本去自动监控服务器的状态是否出现异常，如果出现异常，则自动进行重启，替代人手去重启。
PHP与Nginx 查看服务进程数 通过查看服务器相关进程数，来判断服务器是否正常运行，脚本 service-restart.sh 如下：
# ! /bin/sh ###查看fpm服务是否运行 phpfpm_procnum=`ps -ef|grep &amp;#34;php-fpm&amp;#34;|grep -v grep|wc -l` if [ $phpfpm_procnum -eq 0 ] then echo &amp;#34;restart php-fpm...&amp;#34; systemctl restart php-fpm &amp;gt;&amp;gt; /var/log/listen_service_start.log 2&amp;gt;&amp;amp;1 fi ###查看nginx服务是否运行 nginx_procnum=`ps -ef|grep &amp;#34;nginx&amp;#34;|grep -v grep|wc -l` if [ $nginx_procnum -eq 0 ] then echo &amp;#34;restart nginx...&amp;#34; systemctl restart nginx &amp;gt;&amp;gt; /var/log/listen_service_start.log 2&amp;gt;&amp;amp;1 fi 查看服务器响应 通过 curl 服务器地址，根据响应信息判断是否出现异常，脚本 nginx404.php 如下：
&amp;lt;?php $url = &amp;#39;https://test.com&amp;#39;; $cmd = &amp;#39;systemctl restart php-fpm&amp;#39;; for ($i = 0; $i &amp;lt; 5; $i++) { $exec = &amp;#34;curl connect-timeout 3 -I $url2&amp;gt;/dev/null&amp;#34;; $res = shell_exec($exec); if (stripos($res, &amp;#39;404 Not Found&amp;#39;) !</description>
    </item>
    
    <item>
      <title>百万级数据导入 Elasticsearch 😌</title>
      <link>https://hugo.zkilm.cn/posts/20210901-python-es/</link>
      <pubDate>Wed, 01 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.zkilm.cn/posts/20210901-python-es/</guid>
      <description>涉及知识点  Python 读取CSV文件 Elasticsearch 导入json文件  本文目标  完成超过100M的SCV文件上传到ES  导语 如何将100w条记录同步到Es？
Kibana 有个 Data Visualizer 可以直接上传 CSV 文件，但是有个限制是文件不能大于100M。
那么对于大于100M的 CSV 文件我们该如何进行上传到ES呢？
我这里采用的解决方案是通过Es的 Bulk API 进行导入。
参考地址：https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html
但是 Bulk API 对上传的JSON文件大小也会有限制，限制为50M，所以我们会对JSON文件进行拆分，保证每个单JSON文件不超过50M。
整体包括两个步骤：
步骤一：对总CSV文件进行json格式化，格式化为指定的json格式，需要符合Bulk API的上传要求 步骤二：对json文件进行拆分存储，保证单json文件大小不超过50M Py脚本 Python 代码如下(test.py)：
import csv from collections import defaultdict, OrderedDict import json import time import argparse import os parser = argparse.ArgumentParser(description=&amp;#39;自定义CLI传参&amp;#39;) parser.add_argument(&amp;#39;--csv_filename&amp;#39;, &amp;#39;-cf&amp;#39;, help=&amp;#39;csv_filename 选取指定CSV文件名，必要参数&amp;#39;, required=True) parser.add_argument(&amp;#39;--json_dirname&amp;#39;, &amp;#39;-jd&amp;#39;, help=&amp;#39;json_dirname 将作为JSON文件目录名，必要参数&amp;#39;, required=True) args = parser.parse_args() start_time=time.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://hugo.zkilm.cn/about/</link>
      <pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.zkilm.cn/about/</guid>
      <description>朱康 男 90 后
WEB开发者，喜欢折腾，热爱LARAVEL，重度代码洁癖患者。 综合技能    名称 熟悉程度     PHP ★★★★☆   CSS ★★★☆☆   JAVASCRIPT ★★★☆☆   LINUX ★★★☆☆   MySQL ★★★☆☆   MARKDOWN ★★★☆☆   GOLANG ★★☆☆☆   PYTHON ★★☆☆☆    联系方式：  Github：https://github.com/zhukangs 邮箱：zhukang074@gmail.com  </description>
    </item>
    
    <item>
      <title>Elasticsearch 在 Laravel 中的使用👍</title>
      <link>https://hugo.zkilm.cn/posts/20210823-laravel-es/</link>
      <pubDate>Mon, 23 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.zkilm.cn/posts/20210823-laravel-es/</guid>
      <description>本文目标  学会在 Laravel 中安装 Elasticsearch。 创建索引。 简单查询。  安装 composer 包 composer require elasticsearch/elasticsearch &amp;#39;~7.0&amp;#39; 配置 config/database.php # Elasticsearch Config Info &#39;elasticsearch&#39; =&amp;gt; [ // Elasticsearch 支持多台服务器负载均衡，因此这里是一个数组 &#39;hosts&#39; =&amp;gt; explode(&#39;,&#39;, env(&#39;ES_HOSTS&#39;)), &#39;username&#39; =&amp;gt; env(&#39;ES_USERNAME&#39;), &#39;password&#39; =&amp;gt; env(&#39;ES_PASSWORD&#39;), ], 初始化 Elasticsearch 对象 // 注册一个名为 es 的单例 $this-&amp;gt;app-&amp;gt;singleton(&amp;#39;es&amp;#39;, function () { // 从配置文件读取 Elasticsearch 服务器列表  $builder = ESClientBuilder::create()-&amp;gt;setHosts(config(&amp;#39;database.elasticsearch.hosts&amp;#39;)) -&amp;gt;setBasicAuthentication(config(&amp;#39;database.elasticsearch.username&amp;#39;),config(&amp;#39;database.elasticsearch.password&amp;#39;)); // 如果是开发环境  if (app()-&amp;gt;environment() === &amp;#39;local&amp;#39;) { // 配置日志，Elasticsearch 的请求和返回数据将打印到日志文件中，方便我们调试  $builder-&amp;gt;setLogger(app(&amp;#39;log&amp;#39;)-&amp;gt;driver()); } return $builder-&amp;gt;build(); }); 创建索引 curl -XPUT -u name:pwd http://ip:9200/user_behavior?</description>
    </item>
    
    <item>
      <title>Homestead(ubuntu)&#43;Laravel 使用 RabbitMQ</title>
      <link>https://hugo.zkilm.cn/posts/20210121-laravel-rabbitmq/</link>
      <pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.zkilm.cn/posts/20210121-laravel-rabbitmq/</guid>
      <description>安装 erlang erlang 是 RabbitMQ 的依赖。首先执行
sudo apt-get update 然后执行
sudo apt-get install erlang 安装完毕后，输入 erl 查看 erlang 版本，出现如下提示则表示安装成功：
Erlang/OTP 20 [erts-9.2] [source] [64-bit] [smp:1:1] [ds:1:1:10] [async-threads:10] [kernel-poll:false] Eshell V9.2 (abort with ^G) 1&amp;gt; 然后退出 erlang 命令行：按下 ctrl+c，然后输入 a 即可。
安装 RabbitMq sudo apt-get install rabbitmq-server 安装完毕后，查看 RabbitMQ 状态：
sudo rabbitmqctl status # 附： # 启动RabbitMQ： service rabbitmq-server start # 停止RabbitMQ： service rabbitmq-server stop  # 重启RabbitMQ： service rabbitmq-server restart  配置 RabbitMQ 执行命令，启动 RabbitMQ 插件</description>
    </item>
    
    <item>
      <title>Golang</title>
      <link>https://hugo.zkilm.cn/reading/20210901-goweb-start/</link>
      <pubDate>Sat, 02 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.zkilm.cn/reading/20210901-goweb-start/</guid>
      <description>Golang Web入门：https://mp.weixin.qq.com/s/IIjl93QFAnyjpLu3XgjQxA
跟煎鱼学 Go：https://eddycjy.com/go-categories/
Go语言中文文档：http://topgoer.com/</description>
    </item>
    
    <item>
      <title>Elasticsearch</title>
      <link>https://hugo.zkilm.cn/reading/20210901-elasticsearch-start/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.zkilm.cn/reading/20210901-elasticsearch-start/</guid>
      <description>Elasticsearch 中文文档：https://docs.es.shiyueshuyi.xyz/#/README
PHP7下使用Elasticsearch：https://blog.junphp.com/details/325.jsp</description>
    </item>
    
    <item>
      <title>Kafka</title>
      <link>https://hugo.zkilm.cn/reading/20210901-kafka-start/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.zkilm.cn/reading/20210901-kafka-start/</guid>
      <description>Kafka入门：https://mp.weixin.qq.com/s/yaYwH0XLF9jW8VcSnUOz-g
全网最通俗易懂的Kafka入门：https://zhuanlan.zhihu.com/p/95215691</description>
    </item>
    
    <item>
      <title>Homestead 安装 Swoole 扩展</title>
      <link>https://hugo.zkilm.cn/posts/20200828-homestead-swoole/</link>
      <pubDate>Fri, 28 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://hugo.zkilm.cn/posts/20200828-homestead-swoole/</guid>
      <description>配置镜像源 配置好 ubuntu 的国内镜像源并更新
安装 dev 查看 php 版本，并安装对应 php 版本的 dev
sudo apt install php7.2-dev 配置 pecl sudo pecl channel-update pecl.php.net sudo pear clear-cache sudo pear update-channels sudo pear upgrade 安装 swoole 扩展 安装 php 的 swoole 扩展
sudo pecl install swoole 修改 php.ini 在 php.ini 中增加 extension=swoole.so
php -i | grep php.ini vim /etc/php/7.2/cli/php.ini
# 在php.ini的尾部增加如下代码 extension=swoole.so 重启 php # 在php.ini的尾部增加如下代码 extension=swoole.so 查看是否成功安装 查看 php 是否成功安装 swoole 模块</description>
    </item>
    
  </channel>
</rss>
