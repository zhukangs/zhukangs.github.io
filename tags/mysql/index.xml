<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MySQL on Promise</title>
    <link>https://blog.gookm.cn/tags/mysql/</link>
    <description>Recent content in MySQL on Promise</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Mon, 24 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.gookm.cn/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MySQL 规约‍</title>
      <link>https://blog.gookm.cn/posts/2020/20200824-mysql-statute/</link>
      <pubDate>Mon, 24 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.gookm.cn/posts/2020/20200824-mysql-statute/</guid>
      <description>一、建表规约 1. 【强制】表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint（ 1 表示是，0 表示否），此规则同样适用于 odps 建表。 说明：任何字段如果为非负数，必须是 unsigned。 2. 【强制】表名、字段名必须使用小写字母或数字；禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。 正例：getter_admin，task_config，level3_name 反例：GetterAdmin，taskConfig，level_3_name 3. 【强制】表名不使用复数名词。 说明：表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于 DO 类名也是单数形式，符合表达习惯。 4. 【强制】禁用保留字，如 desc、range、match、delayed 等，请参考 MySQL 官方保留字。 5. 【强制】唯一索引名为 uk字段名；普通索引名则为 idx字段名。 说明：uk_ 即 unique key；idx_ 即 index 的简称。 6. 【强制】小数类型为 decimal，禁止使用 float 和 double。 说明：float 和 double 在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数分开存储。 7. 【强制】如果存储的字符串长度几乎相等，使用 char 定长字符串类型。 8. 【强制】varchar 是可变长字符串，不预先分配存储空间，长度不要超过 5000，如果存储长度大于此值，定义字段类型为 text，独立出来一张表，用主键来对应，避免影响其它字段索引效率。 9. 【强制】表必备三字段：id, gmt_create, gmt_modified。 说明：其中 id 必为主键，类型为 unsigned bigint、单表时自增、步长为 1。gmt_create,gmt_modified 的类型均为 date_time 类型。 10.</description>
    </item>
    
    <item>
      <title>性能优化之MySQL优化🚴‍</title>
      <link>https://blog.gookm.cn/posts/2019/20190309-mysql-opt/</link>
      <pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.gookm.cn/posts/2019/20190309-mysql-opt/</guid>
      <description>SQL语句优化 慢查询 如何发现有问题的SQL？使用mysql慢查询日志对有效率问题的SQL进行监控
//查看慢查询日志是否开启 show variables like &amp;#39;slow_query_log&amp;#39;; //查看慢查询日志存储位置 show variables like &amp;#39;slow_query_log_file&amp;#39;; //开启慢查询日志 set global slow_query_log=on; //指定慢查询日志存储位置 set global show_query_log_file=&amp;#39;/var/lib/mysql/homestead-slow.log&amp;#39;; //记录没有使用索引的sql set global log_queries_not_using_indexes=on; //记录查询超过1s的sql set global long_query_time=1; 慢查询日志所包含的内容：
#User@Host:root[root] @localhost[]//执行sql的主机信息 #Query_time:0.0000024 Lock_time:0.00 Rows_sent:0 Rows_esamined:0//sql的执行信息 SET timestamp=1402389324//sql执行时间 select * from store; //sql的内容 MySQL慢查询日志分析工具之mysqldumpslow（mysql官方）
安装完MySQL后，默认就带了mysqldumpslow，很常用的一个工具。
//查看参数列表 mysqldumpslow -h //分析慢查询日志中前三条比较慢的sql mysqldumpslow -t 3 /var/lib/mysql/homestead-slow.log | more //输出样式效果 Count:1 Time:0.00s Lock=0.00s Rows=10.0 root[rppt]@localhost select * from store MySQL慢查询日志分析工具之pt-query-digest
分析结果比mysqldumpslow更详细全面
//输出到文件 pt-query-digest slow-log &amp;gt; slow_log.</description>
    </item>
    
    <item>
      <title>mysqldump导出数据库各参数说明</title>
      <link>https://blog.gookm.cn/posts/2017/20170321-mysqldump/</link>
      <pubDate>Tue, 21 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.gookm.cn/posts/2017/20170321-mysqldump/</guid>
      <description>mysqldump是mysql用于转存储数据库的实用程序。它主要产生一个SQL脚本，其中包含从头重新创建数据库所必需的命令CREATE TABLE INSERT等。
下面我们详细介绍一下mysqldump导出的各种实例： 👇👇👇👇👇👇
导出数据 1 导出一个数据库的结构
mysqldump -d dbname -uroot -p &amp;gt; dbname.sql 2 导出多个数据库的结构
mysqldump -d -B dbname1 dbname2 -uroot -p &amp;gt; dbname.sql 3 导出一个数据库中数据（不包含结构）
mysqldump -t dbname -uroot -p &amp;gt; dbname.sql 4 导出多个数据库中数据（不包含结构）
mysqldump -t -B dbname1 dbname2 -uroot -p &amp;gt; dbname.sql 5 导出一个数据库的结构以及数据
mysqldump dbname -uroot -p &amp;gt; dbname.sql 6 导出多个数据库的结构以及数据
mysqldump -B dbname1 dbname2 -uroot -p &amp;gt; dbname.sql 7 导出一个数据库中一个表的结构
mysqldump -d dbname1 tablename -uroot -p &amp;gt; tablename.</description>
    </item>
    
    <item>
      <title>MySQL高级操作🥗</title>
      <link>https://blog.gookm.cn/posts/2017/20170106-mysql-advanced/</link>
      <pubDate>Fri, 06 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://blog.gookm.cn/posts/2017/20170106-mysql-advanced/</guid>
      <description>增加内容（基础命令） 1.表后增加主键alter table 表名 add primary key(字段); 在所有字段之后增加primary key选项：primary key(字段信息) 直接在需要当做主键的字段之后，增加primary key属性来确定主键 2.删除主键alter table 表名 drop primary key; 3.自动增长在字段之后增加一个属性auto_increment 4.修改自动增长 alter table 表名auto_increment = 值; 5.删除自动增长 如：alter table 表名 modify id int 6.查看自增长初始变量 show variables like &amp;#39;auto_increment%&amp;#39;; 7.添加唯一键（与主键基本一样）alter table 表名add unique key(字段列表); 8.删除唯一键 alter table 表名drop unique key; - - 错误的 唯一键可以有多个 alter table 表名drop index 唯一键名字; 高级数据操作 1.多数据插入 insert into 表名 [(字段列表)] values(值列表), (值列表)…; 2.主键冲突更新insert into 表名 [(字段列表)] values(值列表) on duplicate key update字段 = 新值; 3.</description>
    </item>
    
    <item>
      <title>MySQL基础操作🍕</title>
      <link>https://blog.gookm.cn/posts/2016/20160511-mysql-basic/</link>
      <pubDate>Sun, 01 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://blog.gookm.cn/posts/2016/20160511-mysql-basic/</guid>
      <description>数据库基本操作 1.创建数据库 create database 数据库名字 charset 字符集名称; 2.显示数据库 show databases; show databases like ‘匹配模式’; 3.显示数据库创建语句 show create database 数据库名字; 4.选择数据 use 数据库名字; 5.修改数据库 alter database 数据库名字 charset = 字符集;（等号可以省） 6.删除数据库 drop database 数据库名字; 数据表操作 1.创建数据表 create table 表名( 字段名1字段类型 [字段属性], -- 字段与字段之间使用逗号分隔 … 字段名N字段类型 [字段属性] -- 最后一个字段后面不需要逗号) [表选项] 2.复制已有表结构 create table 新表名 like 表名; 3.显示数据表 show tables; show tables like ‘匹配模式’; 4.显示表结构 describe 表名 desc 表名(推荐) show columns from 表名 5.</description>
    </item>
    
  </channel>
</rss>
