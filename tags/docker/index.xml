<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on Promise</title>
    <link>https://blog.gookm.cn/tags/docker/</link>
    <description>Recent content in Docker on Promise</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Thu, 02 Jan 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.gookm.cn/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>从Docker折腾到Laradock🌈‍</title>
      <link>https://blog.gookm.cn/posts/2020/20200102-laradock/</link>
      <pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.gookm.cn/posts/2020/20200102-laradock/</guid>
      <description>什么是Docker？ Docker 在容器的基础上，进行了进一步的封装，从文件系统、网络互联到进程隔离等等，极大的简化了容器的创建和维护。使得 Docker 技术比虚拟机技术更为轻便、快捷。
传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。
为什么要用Docker？
更高效的利用系统资源 更快速的启动时间 一致的运行环境 持续交付和部署 更轻松的迁移 更轻松的维护和扩展 对比虚拟机的总结：
特性 容器 虚拟机 启动 秒级 分钟级 硬盘使用 一般为 MB 一般为 GB 性能 接近原生 弱于 系统支持量 单机支持上千个容器 一般几十个 基本概念：
Docker 包括三个基本概念
镜像（Image） 容器（Container） 仓库（Repository） 理解了这三个概念，就理解了 Docker 的整个生命周期。
Docker文档直通车 👍
什么是Laradock？ 一套完整的基于Docker的PHP开发环境。
包含了预先打包的Docker镜像，所有预先配置都是为了提供一个完美的PHP开发环境。
Laradock是在laravel社区众所周知的，因为这个项目最开始只关注在Docker上运行的laravel项目。后来，由于PHP社区的大量使用，它开始支持比如Symfony、CodeIgniter、WordPress、Drupal等其他的PHP项目。
Laradock直通车 ❤
安装（CentOS 安装 Docker CE）： 1.卸载旧版本 旧版本的 Docker 称为 docker 或者 docker-engine，使用以下命令卸载旧版本： $ sudo yum remove docker \ docker-client \ docker-client-latest \ docker-common \ docker-latest \ docker-latest-logrotate \ docker-logrotate \ docker-selinux \ docker-engine-selinux \ docker-engine 2.</description>
    </item>
    
  </channel>
</rss>
